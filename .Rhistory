library(magick)
# Ruta de la imagen JPG
ruta_imagen <- "./outputs/plots/exp_1.jpg"
# Cargar y mostrar la imagen
imagen <- image_read(ruta_imagen)
# Redimensionar la imagen para ajustarla al tamaño de la consola
imagen_redimensionada <- image_scale(imagen, "475x500")
# Mostrar la imagen redimensionada en la consola
print(imagen_redimensionada)
#Buscamos las variables mas importantes de el dataset Churn
datos_churn <- read.csv("./data/customer_churn.csv")
data_df_churn <- datos_churn
tree_churn <- rpart(churn ~ ., data=data_df_churn, control=rpart.control(minsplit=2, minbucket=1, maxdepth=10, cp=0, xval=0))
library(rpart)
#Buscamos las variables mas importantes de el dataset Churn
datos_churn <- read.csv("./data/customer_churn.csv")
data_df_churn <- datos_churn
tree_churn <- rpart(churn ~ ., data=data_df_churn, control=rpart.control(minsplit=2, minbucket=1, maxdepth=10, cp=0, xval=0))
variable_importance_churn <- tree_churn$variable.importance
mean_variable_importance_churn <- mean(variable_importance_churn)
data.frame(Churn_Importance = variable_importance_churn)
#Buscamos las variables mas importantes de el dataset Heart
datos_heart <- read.csv("./data/heart.csv")
data_df_heart <- datos_heart
tree_heart <- rpart(HeartDisease ~ ., data=data_df_heart, control=rpart.control(minsplit=2, minbucket=1, maxdepth=10, cp=0, xval=0))
variable_importance_heart <- tree_heart$variable.importance
mean_variable_importance_heart <- mean(variable_importance_heart)
data.frame(Heart_Importance = variable_importance_heart)
#Buscamos las variables mas importantes de el dataset Wine.
datos_wine <- read.csv("./data/winequality_modificados.csv")
data_df_wine <- datos_wine
tree_wine <- rpart(quality ~ ., data=data_df_wine, control=rpart.control(minsplit=2, minbucket=1, maxdepth=10, cp=0, xval=0))
variable_importance_wine <- tree_wine$variable.importance
mean_variable_importance_wine <- mean(variable_importance_wine)
data.frame(Wine_Importance = variable_importance_wine)
#Tabla con importancia promedio por dataset
data.frame(Dataset = c("ChurnRate", "HeartDisease", "WineQuality"),
Importancia_Promedio = c(mean_variable_importance_churn, mean_variable_importance_heart, mean_variable_importance_wine)
)
#Graficamos la importancia de cada variable y el promedio
library(ggplot2)
# Crear un data frame con las variables y sus importancias
variable_importance_datac <- data.frame(
Variable = names(tree_churn$variable.importance),
Importance = tree_churn$variable.importance
)
# Calcular la media de las importancias
mean_importance <- mean(variable_importance_datac$Importance)
# Crear el scatter plot con la línea de media
scatter_plot <- ggplot(variable_importance_datac, aes(x = Variable, y = Importance)) +
geom_point() +
geom_hline(yintercept = mean_importance, color = "red", size = 0.5) +
labs(x = "Variable", y = "Importance", title = "Churn Variable Importance Scatter Plot") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, face = 'bold'))
# Mostrar el scatter plot
print(scatter_plot)
#Graficamos la importancia de cada variable y el promedio
library(ggplot2)
# Crear un data frame con las variables y sus importancias
variable_importance_datah <- data.frame(
Variable = names(tree_heart$variable.importance),
Importance = tree_heart$variable.importance
)
# Calcular la media de las importancias
mean_importance <- mean(variable_importance_datah$Importance)
# Crear el scatter plot con la línea de media
scatter_plot <- ggplot(variable_importance_datah, aes(x = Variable, y = Importance)) +
geom_point() +
geom_hline(yintercept = mean_importance, color = "red", size = 0.5) +
labs(x = "Variable", y = "Importance", title = "Heart Variable Importance Scatter Plot") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, face = 'bold'))
# Mostrar el scatter plot
print(scatter_plot)
#Graficamos la importancia de cada variable y el promedio
library(ggplot2)
# Crear un data frame con las variables y sus importancias
variable_importance_dataw <- data.frame(
Variable = names(tree_wine$variable.importance),
Importance = tree_wine$variable.importance
)
# Calcular la media de las importancias
mean_importance <- mean(variable_importance_dataw$Importance)
# Crear el scatter plot con la línea de media
scatter_plot <- ggplot(variable_importance_dataw, aes(x = Variable, y = Importance)) +
geom_point() +
geom_hline(yintercept = mean_importance, color = "red", size = 0.5) +
labs(x = "Variable", y = "Importance", title = "Wine Variable Importance Scatter Plot") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, face = 'bold'))
# Mostrar el scatter plot
print(scatter_plot)
#Decidimos cuantas variables dejar en cada nuevo dataset. Para eso, nos quedamos con todas las variables que superen en importancia al promedio.
top_variables_churn <- names(variable_importance_churn[variable_importance_churn > mean_variable_importance_churn])
top_variables_heart <- names(variable_importance_heart[variable_importance_heart > mean_variable_importance_heart])
top_variables_wine <- names(variable_importance_wine[variable_importance_wine > mean_variable_importance_wine])
# Creamos un nuevo conjunto de datos de entrenamiento con las variables más importantes y la variable objetivo
customer_churn_top <- datos_churn[, c(top_variables_churn, "churn")]
heart_top <- datos_heart[, c(top_variables_heart, "HeartDisease")]
winequality_top <- datos_wine[, c(top_variables_wine, "quality")]
#Cargamos los 3 nuevos datasets en la carpeta 'data'.
ruta_archivo_nuevo <- "./data/winequality_top.csv"
write.csv(winequality_top, file=ruta_archivo_nuevo, sep = ',', row.names=FALSE)
ruta_archivo_nuevo <- "./data/customer_churn_top.csv"
write.csv(customer_churn_top, file=ruta_archivo_nuevo, sep = ',', row.names=FALSE)
ruta_archivo_nuevo <- "./data/heart_top.csv"
write.csv(heart_top, file=ruta_archivo_nuevo, sep = ',', row.names=FALSE)
#Tabla que muestra para cada dataset, las variables cuya importancia supera la del promedio.
data.frame(
Churn_variables = top_variables_churn,
Heart_variables = top_variables_heart,
Quality_variables = top_variables_wine
)
# Cargar los paquetes necesarios
library(dplyr)
# Convertir variables categóricas a numéricas (one-hot encoding)
datos_churn <- datos_churn %>%
mutate_if(is.character, as.factor) %>%
mutate(across(where(is.factor), as.numeric))
# Calcular la matriz de correlación
cor_churn <- cor(datos_churn)
# Cargar los paquetes necesarios
library(ggplot2)
library(reshape2)
# Crear una función para generar un heatmap de correlación
plot_correlation_heatmap <- function(cor_matrix, title) {
melted_cor <- melt(cor_matrix)  # Convertir la matriz de correlación en un formato de datos adecuado
ggplot(data = melted_cor, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1),
name = "Correlation") +
labs(title = title) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right",
plot.title = element_text(hjust = 0.5, face = 'bold'))
}
# Crear un heatmap de correlación para cada conjunto de datos
plot_correlation_heatmap(cor_churn, "Correlation Heatmap - Churn Dataset")
#Graficamos la importancia de cada variable y el promedio
library(ggplot2)
# Crear un data frame con las variables y sus importancias
variable_importance_datac <- data.frame(
Variable = names(tree_churn$variable.importance),
Importance = tree_churn$variable.importance
)
# Calcular la media de las importancias
mean_importance <- mean(variable_importance_datac$Importance)
# Crear el scatter plot con la línea de media
scatter_plot <- ggplot(variable_importance_datac, aes(x = Variable, y = Importance)) +
geom_point() +
geom_hline(yintercept = mean_importance, color = "red", size = 0.5) +
labs(x = "Variable", y = "Importance", title = "Churn Variable Importance Scatter Plot") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, face = 'bold'))
# Mostrar el scatter plot
print(scatter_plot)
# Cargar los paquetes necesarios
library(dplyr)
# Convertir variables categóricas a numéricas (one-hot encoding)
datos_heart <- datos_heart %>%
mutate_if(is.character, as.factor) %>%
mutate(across(where(is.factor), as.numeric))
# Calcular la matriz de correlación
cor_heart <- cor(datos_heart)
plot_correlation_heatmap(cor_heart, "Correlation Heatmap - Heart Dataset")
# Cargar los paquetes necesarios
library(dplyr)
# Calcular la matriz de correlación
cor_wine <- cor(datos_wine)
plot_correlation_heatmap(cor_wine, "Correlation Heatmap - Wine Dataset")
